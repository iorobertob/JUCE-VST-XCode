/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"

#include <array>


//==============================================================================
/**
*/
//      MainComponent                          Component 
class TruePan_0_01AudioProcessor  : public AudioProcessor
{
//TruePan_0_01AudioProcessor = MainComponent in JUCE documentation
public:
    ///////// I / O Patterns ///////////////////////////////////////////////////////
    
    
    // Positions and new delay to address a buffer
    int positionInCurrentBuffer[2]  = {0}; 
    int currentDelayInSamples       = 0; 
    int pastDelayInSamples[2]       = {0};   
    
    // To Store values and create interpolations 
    // TODO: see if can be merged into one single buffer
    float prevInput[2]              = {0};
    float prevInputs[2][5]          = {0};
     
    // Used to compute delay in samples from the know position using TruePan class
    // TODO: make without pointer?
    int  delaySamplesKnobPos[2]     = {0};
    int* delaySamplesKnobPosPtr     = delaySamplesKnobPos;
    
    // This is where the input samples are put
    float* samples;
    
    // The circular buffer for the delayed data
    float* delayedData;
    
    // Placeholder for Sample Rate 
    float mSampleRate;
    ///////// I / O Patterns ///////////////////////////////////////////////////////
    
    //==============================================================================
    TruePan_0_01AudioProcessor(); // MainComponent() - Constructor
    ~TruePan_0_01AudioProcessor();// Destructor

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;
 
    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    
    //Custom Methods, Params and Public Data
    enum Parameters{
        MasterBypass=0,	
        StereoWidth, 
        Gain, 
        totalNumParam};
    
private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TruePan_0_01AudioProcessor)
    
       
    
    bool NeedsUIUpdate(){return UIUpdateFlag;};
    void RequestUIUpdate(){UIUpdateFlag=true;};
    void ClearUIUpdateFlag(){UIUpdateFlag=false;};
    //private:
    //Private Data, helper methods etc.
    float UserParams[totalNumParam];
    
    bool UIUpdateFlag; 
    
    // Taken from Audio Effects- Reiss
    AudioSampleBuffer delayBuffer_;
    
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
